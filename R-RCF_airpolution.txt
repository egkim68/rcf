# ============================================================
# RCF Partitioning & Transformation Analysis on Air Pollution Dataset
# Author: Eungi Kim
# Description: Code for region-based partitioning, density visualization, and transformation metrics for the airquality dataset.
# ============================================================

# ============================================================
# 1. SETUP
# ============================================================
library(dplyr)
library(ggplot2)
library(tidyr)
library(patchwork)

# Load and clean dataset
data <- airquality %>% drop_na(Ozone, Wind, Temp)
cuts_per_axis <- 4

# ============================================================
# 2. REGION PARTITIONING FUNCTION
# ============================================================
partition_points <- function(df, x_col, y_col, num_regions = 16, mode = "absolute") {
  cuts_per_axis <- sqrt(num_regions)
  if (mode == "absolute") {
    x_cuts <- seq(0, max(df[[x_col]], na.rm = TRUE), length.out = cuts_per_axis + 1)
    y_cuts <- seq(0, max(df[[y_col]], na.rm = TRUE), length.out = cuts_per_axis + 1)
  } else {
    df[[x_col]] <- (df[[x_col]] - min(df[[x_col]], na.rm = TRUE)) / (max(df[[x_col]], na.rm = TRUE) - min(df[[x_col]], na.rm = TRUE))
    df[[y_col]] <- (df[[y_col]] - min(df[[y_col]], na.rm = TRUE)) / (max(df[[y_col]], na.rm = TRUE) - min(df[[y_col]], na.rm = TRUE))
    x_cuts <- seq(0, 1, length.out = cuts_per_axis + 1)
    y_cuts <- seq(0, 1, length.out = cuts_per_axis + 1)
  }
  df %>%
    mutate(
      x_region = cut(df[[x_col]], breaks = x_cuts, labels = FALSE, include.lowest = TRUE),
      y_region = cut(df[[y_col]], breaks = y_cuts, labels = FALSE, include.lowest = TRUE)
    )
}

# ============================================================
# 3. DENSITY CALCULATION & VISUALIZATION
# ============================================================
# Helper function to ensure all region combinations are present
complete_density_data <- function(data) {
  all_regions <- expand.grid(
    x_region = 1:cuts_per_axis,
    y_region = 1:cuts_per_axis
  )
  all_regions %>%
    left_join(data, by = c("x_region", "y_region")) %>%
    mutate(count = ifelse(is.na(count), 0, count))
}

# Density computation wrapper
calculate_density <- function(df, x_col, y_col, mode) {
  partitioned <- partition_points(df, x_col, y_col, mode = mode)
  partitioned %>%
    count(x_region, y_region, name = "count") %>%
    complete_density_data()
}

# Normalize count for heatmap visualization
normalize_density <- function(df) {
  df %>% mutate(count = count / max(count))
}

# Plot heatmap with region labels
create_tile_heatmap <- function(data, title, x_label, y_label) {
  ggplot(data, aes(x = factor(x_region), y = factor(y_region), fill = count)) +
    geom_tile(color = "white") +
    scale_fill_gradient(low = "white", high = "blue") +
    geom_text(aes(label = paste0("R(", x_region, ",", y_region, ")")), size = 3, alpha = 0.4) +
    labs(title = title, x = x_label, y = y_label, fill = "Density") +
    theme_minimal() +
    theme(
      axis.text = element_text(size = 12),
      axis.title = element_text(size = 14),
      plot.title = element_text(size = 16),
      legend.title = element_text(size = 12)
    )
}

# ============================================================
# 4. VISUALIZATION OF PARTITIONED DENSITY
# ============================================================

# Generate region heatmaps for Ozone vs. Wind
ozone_wind_abs <- calculate_density(data, "Wind", "Ozone", "absolute") %>% normalize_density()
ozone_wind_norm <- calculate_density(data, "Wind", "Ozone", "normalized") %>% normalize_density()

plot_ozone_wind_abs <- create_tile_heatmap(ozone_wind_abs, "A. Ozone vs. Wind (Absolute)", "Wind Region", "Ozone Region")
plot_ozone_wind_norm <- create_tile_heatmap(ozone_wind_norm, "B. Ozone vs. Wind (Normalized)", "Wind Region", "Ozone Region")

# Generate region heatmaps for Ozone vs. Temperature
ozone_temp_abs <- calculate_density(data, "Temp", "Ozone", "absolute") %>% normalize_density()
ozone_temp_norm <- calculate_density(data, "Temp", "Ozone", "normalized") %>% normalize_density()

plot_ozone_temp_abs <- create_tile_heatmap(ozone_temp_abs, "C. Ozone vs. Temp (Absolute)", "Temp Region", "Ozone Region")
plot_ozone_temp_norm <- create_tile_heatmap(ozone_temp_norm, "D. Ozone vs. Temp (Normalized)", "Temp Region", "Ozone Region")

# Combine all plots
combined_plot <- (plot_ozone_wind_abs | plot_ozone_wind_norm) /
                 (plot_ozone_temp_abs | plot_ozone_temp_norm)
print(combined_plot)

# ============================================================
# 5. REGION-BASED TRANSFORMATION METRICS
# ============================================================

calculate_dynamics_of_change <- function(absolute_data, normalized_data, region_prefix = "region") {
  x_region_abs <- absolute_data[[paste0("x_", region_prefix)]]
  y_region_abs <- absolute_data[[paste0("y_", region_prefix)]]
  x_region_norm <- normalized_data[[paste0("x_", region_prefix)]]
  y_region_norm <- normalized_data[[paste0("y_", region_prefix)]]

  absolute_data <- absolute_data %>%
    mutate(region_absolute = paste0("R(", x_region_abs, ",", y_region_abs, ")"))

  normalized_data <- normalized_data %>%
    mutate(region_normalized = paste0("R(", x_region_norm, ",", y_region_norm, ")"))

  all_regions <- expand.grid(x = 1:cuts_per_axis, y = 1:cuts_per_axis) %>%
    mutate(region = paste0("R(", x, ",", y, ")")) %>%
    select(region)

  absolute_density <- absolute_data %>%
    group_by(region_absolute) %>%
    summarise(freq_absolute = n(), .groups = 'drop')

  normalized_density <- normalized_data %>%
    group_by(region_normalized) %>%
    summarise(freq_normalized = n(), .groups = 'drop')

  total_points <- nrow(absolute_data)

  result <- all_regions %>%
    left_join(absolute_density, by = c("region" = "region_absolute")) %>%
    left_join(normalized_density, by = c("region" = "region_normalized")) %>%
    mutate(
      freq_absolute = replace_na(freq_absolute, 0),
      freq_normalized = replace_na(freq_normalized, 0),
      density_absolute = freq_absolute / total_points,
      density_normalized = freq_normalized / total_points,
      net_flow = freq_normalized - freq_absolute,
      relative_change_ratio = (freq_normalized - freq_absolute) / (freq_absolute + 1),
      redistribution_index = abs(freq_normalized - freq_absolute) / (freq_absolute + freq_normalized + 1)
    )

  return(result)
}

# Apply transformation metric function
temp_dynamics <- calculate_dynamics_of_change(
  absolute_data = airquality_absolute,
  normalized_data = airquality_normalized,
  region_prefix = "region_temp"
)

wind_dynamics <- calculate_dynamics_of_change(
  absolute_data = airquality_absolute,
  normalized_data = airquality_normalized,
  region_prefix = "region_wind"
)

cat("\n=== Ozone vs Temp Dynamics ===\n")
print(temp_dynamics)

cat("\n=== Ozone vs Wind Dynamics ===\n")
print(wind_dynamics)
